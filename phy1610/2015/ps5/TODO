- DEBUG: Get some bogus numbers for Newton's method for some initial guess values:

   Using newton with x_0 = 8.5
   Iterations:     6126
   Converged:      1
   Status: 0 (success)
   Root:   -39126
   F(Root):        -0.559229     <<< shouldn't pass the error exit criteria.
   Abserr: 1.18052

trouble with secant too, and even more with Steffenson:

   Using steffenson with x_0 = 3
   Root: 407.431
   F(Root): -0.436807

   Using steffenson with x_0 = 4
   Root: -503.548
   F(Root): -0.458847

   Using steffenson with x_0 = 4.5
   Root: 117.807
   F(Root): -0.367881

   Using steffenson with x_0 = 7
   Root: -1339.76
   F(Root): -0.370843

   Using steffenson with x_0 = 7.5
   Root: -215.19
   F(Root): -0.367895

   Using steffenson with x_0 = 8.5
   Root: -39.267
   F(Root): -0.367881


for completeness ought to implement an interval search method to look for an initial interval that has opposite signs within the initial interval if the interval expansion method doesn't find bound a root.

---------------
DONE:

- Finish doxygen markup for the rest of the code is commented.
- collect the results from the iterate function into a structure (iterations, result, rc, ...) to use in test.
- need rc checking in more places (gsl doc sample relied on abort handler).  Read the docs to see how each function can fail.  use gsl_strerror and gsl_errno as appropriate.
- switch to iostream for mysolver.cc bits that remain from the gsl docs example for consistency.: removed most <stdio.h> stuff now.  Some left for a verbose mode based on the old gsl sample code.
- Using the Boost.Test framework (see lecture 6 of the software development part), write a test for each of these functions to ensure that they get the right value of the roots if you start at the root (by the way, what are the root precisely?).
- debug: -1 should be a root too.  plot the function.  Got errors with:

   ./findroot -x -10 -X 0 --brent

 (fixed)
