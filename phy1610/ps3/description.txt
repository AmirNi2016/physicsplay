Assignment 3: Profiling and unit testing

1. Profile the original code ants.cc and your modular implementation (done in HW#2). For doing so, please use the following methods:
- the time command,
- Instrumenting both the original and modularized version of the code (in the places you consider appropriate) with tick-tock calls. You may use the tick-tock implementation from https://github.com/vanzonr/ticktock ("git clone https://github.com/vanzonr/ticktock.git"). Write a make file to compile these.
- and gprof (the compilation commands for gprof should also go into the Makefile).

Write a report comparing the results between both codes. Identify "bottle-necks" in each code (look at lines for the 'monolithic'-original code and lines and functions for you modular version), and make recommendations on how to improve the performance.

2. Implement a testing unit using the Boost Libraries for your "single_time_step" module from the previous assignment. You could test, for instance, that the time step module does not spontaneously generate ants.
This requires that you install the Boost Libraries either using an installation application like yum or apt-get from linux or from the boost website: http://www.boost.org/

If you are using an emulator in a windows machine, do not install the windows version from the website, but instead use any of the installation tools provided within the emulator (eg. apt-get install boost_dev in MobaXterm).

For reference, note the rarray library from the previous assignment comes with a Boost::Test suite (type "make test").

For the implementation of the unit-test, write a separate program performing the test, and add a test-rule in your make file, such it can be ran from it as:

make test

For simplicity, use one single git repository for both parts.

Please submit:

- All source, header and make files for the unit-test and instrumentation of the codes.
- A text report with the results of the profiling and explain how you performed each of the measurements (e.g. what command you ran).
- One text file with the results of the unit testing for your single_time_step module.
- The output of 'git log' from the development of your codes. We expect to see several commits, and meaningful comments.
