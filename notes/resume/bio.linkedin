


- Implemented multithread support and associated reentrancy retrofit of DB2's Unix client code.
- DB2 Linux porting work, including portability reengineering.
- DB2 64-bit port.  This was a project of massive scope.  We can now eat terrabytes of RAM for breakfast.
- Development and maintenance of DB2's internal mutex and atomic implementations, and associated memory ordering mechanisms.
- Lots of fun parts of our platform stackwalk and related post mortem factilities.
- Lock-free reimplementation of DB2's reader-writer mutex.  The performance of our original reader-writer mutex code sucked for a number of reasons (including use of an mutex within the mutex.)  This was a from scratch implementation where we used a single atomic to track the reader and writer linked lists (indirectly), the reader count, the writer held bit, and a writer reserved bit.  This code has stood the test of time and remains one of my proudest creations.
- Implementation of DB2's asynchronous IO abstraction layer.  It's hard to believe that it wasn't that long ago that we did all our IO synchronously.  This bit of code hides an impressive amount of operating system centric code from our high level development consumers, while squeezing maximum performance from each system.
- Development and maintenance of many other aspects of DB2's operating system abstraction layer.
- Lead of project branch integration team during internal transition from CMVC VCS to clearcase.
- Ad-hoc build tooling and makefile maintenance as required.
- Technical owner of DB2's coding standards
- DB2 pureScale project (distributed shared disk database): Implemented various duplexing, failover and reconstruct aspects of the communications between the DB2 engine and the shared buffer pool and lock manager component.
