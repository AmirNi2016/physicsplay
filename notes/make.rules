LOCAL_COPIED_FILES += $(addprefix figures/,$(LOCAL_FIGURE_FILES))
LOCAL_COPIED_FILES += $(addprefix listings/,$(LOCAL_LISTING_FILES))

LOCAL_CT_FRONTBACK_FILES := $(foreach e,$(notdir $(CLASSICTHESIS_FRONTBACK_FILES)),FrontBackmatter/$(e))
LOCAL_MY_CT_FRONTBACK_FILES := $(foreach e,$(notdir $(MY_CLASSICTHESIS_FRONTBACK_FILES)),FrontBackmatter/$(e))
LOCAL_COPIED_FILES += $(LOCAL_CT_FRONTBACK_FILES) $(LOCAL_MY_CT_FRONTBACK_FILES)

BOOKDEPENDENCIES := $(foreach ext,$(DEPENDENCYEXTENSIONS),$(foreach dir,$(SOURCE_DIRS),$(wildcard $(dir)/*.$(ext))))
BOOKDEPENDENCIES := $(foreach ext,$(DEPENDENCYEXTENSIONS),$(foreach dir,$(SOURCE_DIRS),$(wildcard $(dir)/*.$(ext))))

PDFDEPENDENCIES := $(subst pdf_tex,pdf,$(filter %.pdf_tex,$(BOOKDEPENDENCIES)))
BOOKDEPENDENCIES += $(PDFDEPENDENCIES)

JUSTBOOKDEPENDENCIES := $(filter-out $(STANDALONE), $(BOOKDEPENDENCIES))

PDF_DEPS := $(LOCAL_FILES) $(GENERATED_SOURCES) $(COPIED_FILES) $(LOCAL_COPIED_FILES)
THISBOOK_DEPS += $(JUSTBOOKDEPENDENCIES) $(PDF_DEPS)

MAIN_TARGETS += $(GENERATED_PDFS) .gitignore

CLEAN_TARGETS += myrefs.bib
CLEAN_TARGETS += $(MAIN_TARGETS) 
CLEAN_TARGETS += "$(THISDIR).synctex.gz(busy)"
CLEAN_TARGETS += $(GENERATED_SOURCES)
CLEAN_TARGETS += $(LOCAL_COPIED_FILES)
CLEAN_TARGETS += $(COPIED_FILES)
CLEAN_TARGETS += $(foreach dir,$(SOURCE_DIRS),$(wildcard $(dir)/*.aux))

include ../make.latexmk

define dopdflatex
	$(LATEXMK) $<
	#touch $<.latexmain
endef

all :: $(MAIN_TARGETS)

# FIXME: am guessing that depending on COMMIT_EDITMSG will not work for freshly cloned repo:
.revinfo/lastCommit.tex : ../../.git/COMMIT_EDITMSG
	mkdir -p .revinfo/
	~/bin/mkRevInfo > $@

.revinfo/gitCommitDateAsMyTime.tex : ../../.git/COMMIT_EDITMSG
	mkdir -p .revinfo/
	~/bin/mkRevInfo -mytime > $@

.revinfo/lastCommitBook.tex : ../../.git/COMMIT_EDITMSG
	mkdir -p .revinfo/
	~/bin/mkRevInfo -book > $@

.revinfo/gitCommitDate.tex : ../../.git/COMMIT_EDITMSG
	mkdir -p .revinfo/
	~/bin/mkRevInfo -date > $@

.revinfo/gitCommitString.tex : ../../.git/COMMIT_EDITMSG
	mkdir -p .revinfo/
	~/bin/mkRevInfo -commit --no-newline > $@

.revinfo/gitRepo.tex : ../../.git/COMMIT_EDITMSG
	mkdir -p .revinfo/
	~/bin/mkRevInfo -repo > .revinfo/gitRepo.tex

opt/%.pdf : %.pdf
	mkdir -p opt
	$(QPDF) --linearize $< $@

$(THISDIR).pdf :: $(THISBOOK_DEPS)
$(THISDIR).pdf :: .revinfo/lastCommit.tex
$(THISDIR).pdf :: .revinfo/gitCommitDateAsMyTime.tex
$(THISDIR).pdf :: .revinfo/lastCommitBook.tex
$(THISDIR).pdf :: .revinfo/gitCommitDate.tex
$(THISDIR).pdf :: .revinfo/gitCommitString.tex
$(THISDIR).pdf :: .revinfo/gitRepo.tex

%.pdf :: %.tex
	$(dopdflatex)

clean ::
	rm -f $(CLEAN_TARGETS)
	rm -rf ./.revinfo

#
# probably want a way to specialize this.  Don't have index markup on everything for example.
# Do I want a separate appendix section necessarily? (yes, for phy485, maybe not for older stuff).
#
$(THISDIR).tex : ../classicthesis.mine/ClassicThesis.tex
	cp $< $@

mathematica.tex : ../METADATA ../../mathematica/METADATA
	(cd .. ; ./METADATA -mathematica -latex -$(THISDIR) $(REDACTED) > $(THISDIR)/mathematica.tex)

matlab.tex : ../METADATA ../../matlab/METADATA
	(cd .. ; ./METADATA -matlab -latex -$(THISDIR) $(REDACTED) > $(THISDIR)/matlab.tex)

julia.tex : ../METADATA ../../julia/METADATA
	(cd .. ; ./METADATA -julia -latex -$(THISDIR) $(REDACTED) > $(THISDIR)/julia.tex)

# plainnat.bib (as used by classicthesis) doesn't like @webpage:
# http://tex.stackexchange.com/questions/56951/what-does-warning-entry-type-for-isnt-style-file-defined-mean/56954#56954
Bibliography.bib : myrefs.bib
	sed 's/@webpage/@manual/g' < $< > $@

# old style: don't think I have any direct uses anymore, but am generating Bibliography.bib from this.
myrefs.bib: ../myrefs.bib.in ../METADATA
	cp ../myrefs.bib.in myrefs.bib
	(cd .. ; ./METADATA -bib >> $(THISDIR)/myrefs.bib)

.gitignore : GNUmakefile
	rm -f .gitignore
	echo $(ORIG_FILES) $(COPIED_FILES) | tr ' ' '\n' | sed 's,.*/,notes/$(THISDIR)/,' > $@
	echo $(LOCAL_COPIED_FILES) $(GENERATED_SOURCES) | tr ' ' '\n' | sed 's,^,notes/$(THISDIR)/,' >> $@
ifneq ($(PDFDEPENDENCIES),)
	echo $(PDFDEPENDENCIES) | tr ' ' '\n' | sed 's,^,!notes/$(THISDIR)/,' >> $@
endif

cronology.tex : ../METADATA
	(cd .. ; ./METADATA -$(THISDIR) > $(THISDIR)/cronology.tex)

$(LOCAL_FILES) :
	cp $(filter %$@, $(ORIG_FILES)) $@

$(LOCAL_CT_FRONTBACK_FILES) : %.tex : ../classicthesis/%.tex
	cp $< $@

$(LOCAL_MY_CT_FRONTBACK_FILES) : %.tex : ../classicthesis.mine/%.tex
	cp $< $@

%.sty : ../%.sty
	cp $^ $@

#book_layout.sty : ../book_layout.sty
#	cp $^ $@
#
#peeters_layout.sty : ../peeters_layout.sty
#	cp $^ $@
#
#peeters_macros.sty : ../peeters_macros.sty
#	cp $^ $@
#
#macros_bm.sty : ../macros_bm.sty
#	cp $^ $@

# http://tex.stackexchange.com/questions/24831/i-encountered-an-errorunknown-graphics-extension-eps
%.pdf : %.eps
	epstopdf $^ --outfile=$@

#%.pdf : %.svg
#	$(INKSCAPE) $^ --export-pdf=$@

currentBookCopyright.tex : ~/bin/printCopyRight
	~/bin/printCopyRight -latex > $@

vpath %.tex $(ORIG_FILE_DIRS)

# This was for linearize.  Find a solution that does that as well as making the sizes manageable.
ifneq ($(QPDF),)
all :: opt/$(THISDIR).pdf
endif

kbordermatrix.sty : 
	wget http://ctan.bppro.ca/macros/generic/misc/kbordermatrix.sty
