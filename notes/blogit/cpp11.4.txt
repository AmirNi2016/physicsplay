Here's more notes from reading Stroustrup's "The C++ Programming Language, 4th edition"

<h2>Alternate construction methods</h2>

I'd seen the new inline member initialization syntax that can be used to avoid (or simplify) explicit constructors.  For example, instead of

[sourcecode language="cpp"]
struct physical
{
   double  c      ;  ///< wave speed
   double  tau    ;  ///< damping time
   double  x1     ;  ///< left most x value
   double  x2     ;  ///< right most x value

   /**
     set physical parameters to some defaults
    */
   physical() ;
} ;

physical::physical() :
   c{ 1.0 },
   tau{ 20.0 },
   x1{ -26.0 },
   x2{ +26.0 }
{
}
[/sourcecode]

You can do

[sourcecode language="cpp"]
struct physical
{
   double c{ 1.0 }    ;  ///< wave speed
   double tau{ 20.0 } ;  ///< damping time
   double x1{ -26.0 } ;  ///< left most x value
   double x2{ +26.0 } ;  ///< right most x value
} ;
[/sourcecode]

Much less code to write, and you can keep things all in one place.  I wondered if this could be combined with constexpr, but the only way I could get that to work was to use static members, which also have to have an explicit definition (at least on Mac) to avoid a link error:

[sourcecode language="cpp"]
struct p2
{  
   static constexpr double x2{ +26.0 } ;  ///< right most x value
} ;
constexpr double p2::x2 ;

int main()
{  
   p2 p ;

   return p.x2 ;
}
[/sourcecode]

But that is a digression.  What I wanted to mention is that, while member initialization is cool, there's more in the C++11 constructor simplification toolbox.  We can write a constructor that builds on the member constructors (if any), but we can also make constructor specialations just call other constructors (called a delegating constructor), like so

[sourcecode language="cpp"]
struct physical
{
   double c{ 1.0 }    ;  ///< wave speed
   double tau{ 20.0 } ;  ///< damping time
   double x1{ -26.0 } ;  ///< left most x value
   double x2{ +26.0 } ;  ///< right most x value

   physical( const double cv ) : c{cv} {}
   physical( const double x1v, const double x2v ) : x1{x1v}, x2{x2v} {}

   physical( const double cv, const int m ) : physical{cv} { c *= m ; } ;
} ;
[/sourcecode]

Stroustrup points out that the object is considered initialized by the time the delegating constructor is called. So if that throws, we shouldn't get to the body of the constructor function

[sourcecode language="cpp"]
#include <iostream>

struct physical
{
   double c{ 1.0 }    ;  ///< wave speed

   physical( const double cv ) { throw 3 ; }

   physical( const double cv, const int m ) : physical{cv} { std::cout << "won't get here\n" ; }
} ;

int main()
try
{
   physical p{5} ;

   return 0 ;
}
catch (...)
{
   return 1 ;
}
[/sourcecode]

<h2>default functions</h2>

If we define a structure with an explicit constructor with parameters, then unless explicit action is taken, this means that we no longer get a default constructor.  Example:

[sourcecode language="cpp"]
#include <string>

struct F
{
   std::string s{} ;
   
   F( int n ) : s( n, 'a' ) {}
} ;

F x ;
[/sourcecode]

This results in errors because the default constructor has been deleted by defining an explicit constructor

[sourcecode language="bash"]
$ c++ -o d -std=c++11 d.cc
d.cc:10:3: error: no matching constructor for initialization of 'F'
F x ;
  ^
d.cc:7:4: note: candidate constructor not viable: requires single argument 'n', but no arguments were provided
   F( int n ) : s( n, 'a' ) {}
   ^
d.cc:3:8: note: candidate constructor (the implicit move constructor) not viable: requires 1 argument, but 0 were provided
struct F
       ^
d.cc:3:8: note: candidate constructor (the implicit copy constructor) not viable: requires 1 argument, but 0 were provided
1 error generated.
[/sourcecode]

We can get back the default constructor, without having to write it out explictly, by just doing:

[sourcecode language="cpp"]
#include <string>

struct F
{
   std::string s{} ;
   
   F( int n ) : s( n, 'a' ) {}

#if 1
   F() = default ;
#endif
} ;

F x ;
[/sourcecode]

It wouldn't be a big deal to define an explicit default constructor above, just
[sourcecode language="cpp"]
    F() : s{} {}
[/sourcecode]

but for a more complex class, being able to let the compiler do the work is nicer.  Using = default also 
means that the redundancy of specifying a member initializer and also having to specify the same initializer
in the default constructor member list is not required, which is nicer.

<h2>move operations</h2>

Back in university I once wrote a matrix class that I was proud of.  It was reference counted to avoid really expensive assignment and copy construction operations, which were particularily bad for any binary operation that returned a new value

[sourcecode language="cpp"]
template <class T>
matrix<T> operator + ( const matrix<T> & a, const matrix<T> & b ) ;
[/sourcecode]

C implementations of an addition operation (like the blas functions), wouldn't do anything this dumb.  Instead they use an interface like

[sourcecode language="cpp"]
template <class T>
void matrixadd( matrix<T> & r, const matrix<T> & a, const matrix<T> & b ) ;
[/sourcecode]

This doesn't have the syntactic sugar, but the performance won't suck as it would if reference counting wasn't used.  I recall having a lot of trouble getting the reference counting just right, and had to instrument all my copy constructors, assignment operators and destructors with trace logging to get it all right.  Right also depended on the compiler that was being used!  I've still got a copy of that code kicking around somewhere, but it can stay where it is out of sight since move operations obsolete it all.

FIXME: construct an example

<h2></h2>
