#! /usr/bin/perl

# TODO for wp-mathjax:
#
# - title and prologue
# - remove mathLabelBoxes -> underbrace
# - \citep and references fixups (code partially stolen from ~/bin/tex2blog, but \citep{} fixups still todo.)
# - \boxedEquation -> equation \boxed{}
# - \cref removals.
# - \makeexample, \maketheorem, \makedefinition
# - \captionedTable
# - '\ ' slash space removal.

use strict ;
use warnings ;
use Getopt::Long;

my $filebase ;
my $showUsage = 0 ;

my $urlMessage ;
$urlMessage = "Click here for a PDF of this post with nicer formatting" ;

my $r1 = qr/
     (                   # start of capture buffer 1
     {                   # match an opening brace
         (?:               
             [^{}]++     # one or more non braces, non backtracking
               |                  
             (?1)        # found { or }, so recurse to capture buffer 1
         )*                 
     }                   # match a closing brace
     )                   # end of capture buffer 1
     /x;

my $r2 = qr/
     (                   # start of capture buffer 1
     {                   # match an opening brace
         (?:               
             [^{}]++     # one or more non braces, non backtracking
               |                  
             (?1)        # found { or }, so recurse to capture buffer 1
         )*                 
     }                   # match a closing brace
     )                   # end of capture buffer 1
     (                   # start of capture buffer 2
     {                   # match an opening brace
         (?:               
             [^{}]++     # one or more non braces, non backtracking
               |                  
             (?1)        # found { or }, so recurse to capture buffer 2
         )*                 
     }                   # match a closing brace
     )                   # end of capture buffer 2
     /x;

my $r3 = qr/
     (                   # start of capture buffer 1
     {                   # match an opening brace
         (?:               
             [^{}]++     # one or more non braces, non backtracking
               |                  
             (?1)        # found { or }, so recurse to capture buffer 1
         )*                 
     }                   # match a closing brace
     )                   # end of capture buffer 1
     (                   # start of capture buffer 2
     {                   # match an opening brace
         (?:               
             [^{}]++     # one or more non braces, non backtracking
               |                  
             (?1)        # found { or }, so recurse to capture buffer 2
         )*                 
     }                   # match a closing brace
     )                   # end of capture buffer 2
     (                   # start of capture buffer 3
     {                   # match an opening brace
         (?:               
             [^{}]++     # one or more non braces, non backtracking
               |                  
             (?1)        # found { or }, so recurse to capture buffer 3
         )*                 
     }                   # match a closing brace
     )                   # end of capture buffer 3
     /x;


GetOptions( 
   'file=s'       => \$filebase,
   'help!'        => \$showUsage,
) ;

if ( $showUsage or !defined $filebase )
{
   die "usage: ~/bin/tex2mathjax -f filenameWithoutTexSuffix [-help]" ;
}

my $rLines = slurpLatex( $filebase ) ;

my $bibString = processBib() ;

print "[mathjax]\n" ;

foreach (@$rLines)
{
   chomp ;

   s,\\renewcommand{\\basename}{(.*?)},\\blogpage{http://peeterjoot.com/archives/math2014/$1.pdf}, ;
   s,\\blogpage{(.*)},<a href="$1">[$urlMessage]</a>, ;

   # FIXME: these ones should be moved to the mathjax macros:
   s/\\overbar${r1}/\\overline{$1}/g ;
   s/\\textAndIndex{(.*?)}/$1/g ;
   s/\\implies/\\Rightarrow/g ;

   s/^ *%.*// ;
   s/^ *\\input.*// ;
   s/^ *\\renewcommand.*// ;
   s/^ *\\begin{subequations}.*// ;
   s/^ *\\end{subequations}.*// ;
   s/^ *\\newcommand.*// ;
   s/^ *\\usepackage.*// ;
   s/^ *\\beginArtNoToc.*// ;
   s/^ *\\EndArticle.*// ;
   s/^ *\\EndNoBibArticle.*// ;
   s/^ *\\generatetitle{(.*)}/$1/ ;
   s/^ *\\label{chap:.*// ;

   s,{ *\\em\s+(.*?)},<em>$1</em>,g;

#\cref{fig:lecture2:lecture2Fig1}
   s/\\cref{(.*?)Fig(\d+)}/fig. $2/g ;

#\imageFigure{../../figures/ece1254/lecture2Fig1}{Sample resistive circuit}{fig:lecture2:lecture2Fig1}{0.3}
   s/^ *\\imageFigure{(.*?)Fig(\d+)}{(.*?)}.*/${1}Fig$2: fig. $2.  $3/ ;

   s/\bcref{/ref{/g ;
   s/\beqnref/ref{/g ;
   s/\bEqnref/ref{/g ;

   s,{dmath},{equation}, ;
   s,\\section{(.*)},<h2>$1</h2>,;
   s,\\sectionAndIndex{(.*)},<h2>$1</h2>,;
   s,\\subsection{(.*)},<h3>$1</h3>,;
   s,\\paragraph{(.*)},<h3>$1</h3>,;

   s,\\begin{itemize},<ul>, ;
   s,\\end{itemize},</ul>, ;
   s,\\begin{enumerate},<ol>, ;
   s,\\end{enumerate},</ol>, ;
   s,\\item,<li>, ;

   print "$_\n" ;
}

print $bibString ;

exit 0 ;

sub slurpLatex
{
   my $failedOpen = 0 ;
   my @lines = () ;

   open my $fh, "<$filebase.tex" or $failedOpen = 1 ;
   if ( $failedOpen )
   {
      open $fh, "<$filebase.ltx" or die "could not open '$filebase.tex' nor '$filebase.ltx'\n" ;
   }

   while (<$fh>)
   {
      push( @lines, $_ ) ;
   }
   close $fh ;

   return \@lines ;
}

# side effect (disabled: populates the %refnumbers hash.)
sub processBib
{
   my $bibOut = '' ;

   my $haveBib = 1 ;
   open my $fh, "<$filebase.bbl" or $haveBib = 0 ;

   if ( $haveBib )
   {
      my $curNum = 1 ;

      while (<$fh>)
      {
         chomp ;

         s,\\begin{thebibliography}.*,<h1>References</h1>, ;

         #\bibitem[Joot({\natexlab{a}})]{PJLorentzWave}
         s/\\bibitem.*]{/\\bibitem{/ ;
         if ( s/\\bibitem{(.*?)}// )
         {
            $bibOut .= "\n\n" ;
            #$refnumbers{$1} = $curNum ;
            $bibOut .= "[$curNum] " ;

            $curNum++ ;
         }
         else
         {
            next if (/Available from:/ or
                     /\\providecommand/ or
                     /\\expandafter/ or
                     0 ) ;

            if ( /\\end{thebibliography}/ )
            {
               $bibOut =~ s,\\url{(.*?)},<a href="$1">$1</a>,;
               $bibOut .= "\n" ;
               last ;
            }

            s/~/ /g ;
            s,{ *\\em\s+(.*?)},<em>$1</em>,g;
            s,\\em *{(.*?)},<em>$1</em>,g ;
            s,\\emph *{(.*?)},<em>$1</em>,g ;
            s/\\newblock// ;

            # \url can be split across lines, as in the following:
            #  \url{http://en.wikipedia.org/w/index.php?title=Relativistic_Doppler_effect&o%
            #ldid=298724264}.
            #
            #In case it isn't do a first check here before stripping out {}'s
            #
            s,\\url{(.*?)},<a href="$1">$1</a>,sg;
            s/{(.*?)}/$1/g ;

            #die "'$_'\n" if /\\url/ ;
            $bibOut .= "$_" ;
         }
      }

      close $fh ;
   }

   return $bibOut ;
}
