Some notes on Chapter 31 (standard library) of Stroustrup's "The C++ Programming Language".

<h2>Emplace</h2>

I'd never heard the word emplace before, but it turns out that it isn't a word made up for c++, but is also a dictionary word

http://www.dictionary.com/browse/emplace

meaning to "put into place or position".

c++11 defines some emplace functions.  Here's an example for vector

[sourcecode language="cpp"]
#include <vector>
#include <iostream>

int main()
{
   using pair = std::pair<int, int> ;
   using vector = std::vector< pair > ;

   vector v ;

   pair p{ 1, 2 } ;
   v.push_back( p ) ;
   v.push_back( {2, 3} ) ;
   v.emplace_back( 3, 4 ) ;

   for ( auto e : v )
   {
      std::cout << e.first << ", " << e.second << '\n' ;
   }

   return 0 ;
}
[/sourcecode]

The emplace_back is like the push_back function, but does not require that a constructed object be created first, either explicitly as in the object p above, or implictly as done with the {2, 3} pair initializer list.

<h2>multimap</h2>

I'd written some perl code the other day when I wanted a hash that had multiple entries per key.  Since my hashed elememts were simple, I just strung them together as comma separated entries (I could have also used a hash of array references).  It looks like c++11 builds exactly the construct that I wanted into STL, and has both a multimap and unordered_multimap.  Here's an example of the latter

[sourcecode language="cpp"]
#include <unordered_map>
#include <string>
#include <iostream>

int main()
{
   std::unordered_multimap< int, std::string > m ;

   m.emplace( 3, "hi" ) ;
   m.emplace( 3, "bye" ) ;
   m.emplace( 4, "wow" ) ;

   for ( auto & v : m )
   {
      std::cout << v.first << ": " << v.second << '\n' ;
   }
  
   for ( auto f{ m.find(3) } ; f != m.end() ; ++f )
   {
      std::cout << "find: " << f->first << ": " << f->second << '\n' ;
   }
   
   return 0 ;
} 
[/sourcecode]

Running this gives me
[sourcecode language="bash"]
$ ./a.out 
4: wow
3: hi
3: bye
find: 3: hi
find: 3: bye
[/sourcecode]

Observe how nice auto is here.  I don't have to care what the typename for the unordered_multimap find result is.  According to gdb that type is:

[sourcecode language="bash"]
(gdb) whatis f
type = std::__1::__hash_map_iterator<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::basic_string<char> >, void*>*> >
[/sourcecode]

Yikes!

<h2></h2>
