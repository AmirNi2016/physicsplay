#!/usr/bin/perl

use warnings ;
use strict ;
use Getopt::Long;

my $doGabook = 0 ;
my $doNonga = 0 ;
my $doPhy356 = 0 ;
my $doClassicalMechanics = 0 ;
my $doPhy456 = 0 ;
my $doPhy452 = 0 ;
my $doPhy454 = 0 ;
my $doPhy485 = 0 ;
my $doPhy450 = 0 ;
my $doPhy487 = 0 ;
my $doOtherbook = 0 ;

my $doBib = 0 ;
my $doHistory = 0 ;
my $doMathematica = 0 ;
my $latex = 0 ;
my $doMathematicaFtp = 0 ;

GetOptions
(
   'gabook!'    => \$doGabook,
   'phy356!'    => \$doPhy356,
   'classicalmechanics!'    => \$doClassicalMechanics,
   'phy456!'    => \$doPhy456,
   'phy454!'    => \$doPhy454,
   'phy485!'    => \$doPhy485,
   'phy452!'    => \$doPhy452,
   'phy487!'    => \$doPhy487,
   'phy450!'    => \$doPhy450,
   'miscphysics!'  => \$doNonga,
   'latex!'  => \$latex,
   'mathematica!'  => \$doMathematica,
   'mathFtp!'  => \$doMathematicaFtp,
   'otherbook!' => \$doOtherbook,
   'all'        => sub {
                          $doGabook = 1 ;
                          $doNonga = 1 ;
                          $doPhy356 = 1 ;
                          $doClassicalMechanics = 1 ;
                          $doPhy454 = 1 ;
                          $doPhy485 = 1 ;
                          $doPhy452 = 1 ;
                          $doPhy456 = 1 ;
                          $doPhy450 = 1 ;
                          $doPhy487 = 1 ;
                          $doOtherbook = 1 ;
                       },
   'bib!'       => \$doBib,
   'history!'   => \$doHistory,

   'help'       => sub { die
"METADATA [-help | -history | -bib] [-mathematica [-latex] | -mathFtp | -other | -phy356 | -classicalmechanics | -phy456 | -phy454 | -phy485 | -phy450 | -phy452 -phy487 | -gabook]

options:
-history hypertext history.

i.e.
   ./METADATA -history -all

-bib bibtex listing of the documents.
" ; },
) ;

require "gabook/METADATA" ;
require "miscphysics/METADATA" ;
require "phy356/METADATA" ;
require "classicalmechanics/METADATA" ;
require "phy456/METADATA" ;
require "phy485/METADATA" ;
require "phy452/METADATA" ;
require "phy487/METADATA" ;
require "phy454/METADATA" ;
require "phy450/METADATA" ;
require "otherbook/METADATA" ;
require "../mathematica/METADATA" ;

my @gabook = gabookMeta() ;
my @miscphysics = miscMeta() ;
my @phy356 = phy356Meta() ;
my @classicalmechanics = classicalMechMeta() ;
my @phy456 = phy456Meta() ;
my @phy485 = phy485Meta() ;
my @phy452 = phy452Meta() ;
my @phy487 = phy487Meta() ;
my @phy454 = phy454Meta() ;
my @phy450 = phy450Meta() ;
my @otherbook = otherbookMeta() ;
my @mathematica = mathematicaMeta() ;

my %monthsOfYear = (
'January' => 1,
'Jan' => 1,
'February' => 2,
'Feb' => 2,
'March' => 3,
'Mar' => 3,
'April' => 4,
'Apr' => 4,
'May' => 5,
'June' => 6,
'Jun' => 6,
'July' => 7,
'Jul' => 7,
'August' => 8,
'Aug' => 8,
'September' => 9,
'Sept' => 9,
'October' => 10,
'Oct' => 10,
'November' => 11,
'Nov' => 11,
'December' => 12,
'Dec' => 12,
) ;

#checkDate() ; die ;

my @All ;

if ( $doGabook )
{
   push( @All, @gabook ) ;
}

if ( $doOtherbook )
{
   push( @All, @otherbook ) ;
}

if ( $doPhy356 )
{
   push( @All, @phy356 ) ;
}

if ( $doClassicalMechanics )
{
   push( @All, @classicalmechanics ) ;
}

if ( $doPhy456 )
{
   push( @All, @phy456 ) ;
}

if ( $doPhy454 )
{
   push( @All, @phy454 ) ;
}

if ( $doPhy485 )
{
   push( @All, @phy485 ) ;
}

if ( $doPhy452 )
{
   push( @All, @phy452 ) ;
}

if ( $doPhy487 )
{
   push( @All, @phy487 ) ;
}

if ( $doPhy450 )
{
   push( @All, @phy450 ) ;
}

if ( $doNonga )
{
   push( @All, @miscphysics ) ;
}

if ( $doHistory )
{
   printHistory( @All ) ;
}
elsif ( $doBib )
{
   printBib( @gabook, @miscphysics, @phy356, @classicalmechanics, @phy456, @phy454, @phy485, @phy452, @phy450, @phy487, @otherbook ) ;

   # generate cross reference's to gabook for miscphysics.pdf
   printBookBib( 'Exploring physics with Geometric Algebra',
                 'gabook',
                 'http://sites.google.com/site/peeterjoot/math2009/gabook.pdf',
                 @gabook ) ;

   printBookBib( 'Misc Physics and Math Play',
                 'miscphysics',
                 'http://sites.google.com/site/peeterjoot/math2009/miscphysics.pdf',
                 @miscphysics ) ;

   printBookBib( 'Quantum Mechanics I.',
                 'phy356',
                 'http://sites.google.com/site/peeterjoot2/math2010/phy356.pdf',
                 @phy356 ) ;

   printBookBib( 'Quantum Mechanics II.',
                 'phy456',
                 'http://sites.google.com/site/peeterjoot2/math2011/phy456.pdf',
                 @phy456 ) ;

   printBookBib( 'Relativistic Electrodynamics.',
                 'phy450',
                 'http://sites.google.com/site/peeterjoot2/math2011/phy450.pdf',
                 @phy450 ) ;

   printBookBib( 'Some classical mechanics notes.',
                 'classicalmechanics',
                 'http://sites.google.com/site/peeterjoot2/math2013/classicalmechanics.pdf',
                 @classicalmechanics ) ;

   printBookBib( 'Continuum mechanics.',
                 'phy454',
                 'http://sites.google.com/site/peeterjoot2/math2012/phy454.pdf',
                 @phy454 ) ;

   printBookBib( 'Basic statistical mechanics.',
                 'phy452',
                 'http://sites.google.com/site/peeterjoot2/math2013/phy452.pdf',
                 @phy452 ) ;

   printBookBib( 'Advanced classical optics.',
                 'phy485',
                 'http://sites.google.com/site/peeterjoot2/math2012/phy485.pdf',
                 @phy485 ) ;

   printBookBib( 'Condensed matter physics.',
                 'phy487',
                 'http://sites.google.com/site/peeterjoot2/math2013/phy487.pdf',
                 @phy487 ) ;
}
elsif ( $doMathematica )
{
   if ( $latex )
   {
      my $filter ;

      if ( $doPhy454 )
      {
         $filter = "phy454/" ;
      }

      if ( $doPhy456 )
      {
         $filter = "phy456/" ;
      }

      if ( $doPhy450 )
      {
         $filter = "phy450/" ;
      }

      if ( $doPhy485 )
      {
         $filter = "phy485/" ;
      }

      if ( $doClassicalMechanics )
      {
         $filter = "classicalmechanics/" ;
      }

      if ( $doPhy452 )
      {
         $filter = "phy452/" ;
      }

      if ( $doPhy487 )
      {
         $filter = "phy487/" ;
      }

      mathematicaIndexLatex( $filter ) ;
   }
   else
   {
      mathematicaIndex() ;
   }
}
elsif ( $doMathematicaFtp )
{
   mathematicaFtp() ;
}
else
{
   dumpem( @All ) ;
}

exit ;

sub mathematicaFtp
{
   print "cd public_html\n" ;
   my %dirs = () ;

   foreach (@mathematica)
   {
      my $path = $_->{'path'} ;
      my $dirname = $path ;
      $dirname =~ s,/.*,, ;
      $dirs{$dirname}++ ;
   }

   foreach (keys %dirs)
   {
      print "mkdir $_\n" ;
   }

   print "cd blogit\n" ;
   print "lcd blogit\n" ;
   print "prompt off\n" ;

   foreach my $dirname (keys %dirs)
   {
      print "lcd ../$dirname\n" ;
      print "cd ../$dirname\n" ;
      print qq(mput *.nb\n) ;
      print qq(mput *.cdf\n) ;
      print qq(mput *.htm\n) ;
   }

#   foreach (@mathematica)
#   {
#      my $path = $_->{'path'} ;
#      my $filename = $path ;
#      $filename =~ s,.*/,, ;
#      my $dirname = $path ;
#      $dirname =~ s,/.*,, ;
#
#      #next unless ( $path =~ / / ) ;
#      #my $nSpacePath = $path ;
#      #$nSpacePath =~ s/ /_/g ;
#      #print qq(git mv "$path" $nSpacePath\n) ;
#
#      print "lcd ../$dirname\n" ;
#      print "cd ../$dirname\n" ;
#      print qq(put "$filename"\n) ;
#   }
}

sub mathematicaIndex
{
   print qq(
<html>
<body>
<title>
My Mathematica notebooks.
</title>

The <a href="http://www.wolfram.com/cdf-player/">Wolfram CDF player</a> can also be used to view a number of these notebooks after download.

<ul>
) ;

   foreach (sort datesort @mathematica)
   {
      my $path = $_->{'path'} ;
      my $filename = $path ;
      $filename =~ s,.*/,, ;
      my $date = $_->{'DATE'} ;
      my $desc = $_->{'WHAT'} ;
      my ($width, $height) = ( $_->{'WIDTH'}, $_->{'HEIGHT'} ) ;

      unless (defined $width)
      {
         $width = 1000 ;
      }

      unless (defined $height)
      {
         $height = 1800 ;
      }

      my $pathWithoutSuffix = $path ;
      $pathWithoutSuffix =~ s/\.[^\.]+$// ;

      # CDF player doesn't open these from raw.github (although ../cdfEmbedExample.html did?)

      my $pathWithoutQualification = $path ;

      # for google sites page indexing these as links to github urls:
      my $genSitesMathematicaPages = 0 ;

      if ( $genSitesMathematicaPages )
      {
#         $path = "https://raw.github.com/peeterjoot/mathematica/master/$path" ;
         $path = "https://github.com/peeterjoot/mathematica/raw/master/$path" ;
      }

      # hack up the description to force html newlines.
      $desc =~ s/\n\n/<p>/gsm ;

      if ( $genSitesMathematicaPages )
      {
         print qq(   <li> $date
<a href="$path">$pathWithoutQualification</a>
<p>
$desc</li>\n) ;
      }
      else
      {
         print qq(   <li> $date
<p>
EMBEDDED:
<a href="$pathWithoutSuffix.htm">$pathWithoutSuffix</a>
<p>
DIRECT:
<a href="$path">$pathWithoutQualification</a>
<p>
$desc</li>\n) ;
      }

      # now generate a helper embedding page.

      if ( 0 )
      {
         open my $fh, ">$pathWithoutSuffix.htm" or die ;

    print $fh qq@
<html>
<body>
<title>
$pathWithoutSuffix
</title>

The <a href="http://www.wolfram.com/cdf-player/">Wolfram CDF player</a> browser plugin is required to view this notebook.

<p>
$desc

<p>
<object classid="clsid:612AB921-E294-41AA-8E98-87E7E057EF33" width="$width" height="$height" type="application/vnd.wolfram.cdf.text">
<param name="src" value="$filename">
<embed width="$width" height="$height" src="$filename" type="application/vnd.wolfram.cdf.text">
</object>

</body>
</html>
@ ;
#<script type="text/javascript" src="http://www.wolfram.com/cdf-player/plugin/v2.1/cdfplugin.js"></script>
#<script type="text/javascript">
#   var cdf = new cdfplugin() ;
#   cdf.embed('$filename', $width, $height) ;
#</script>

            close $fh ;
      }
      else
      {
         unlink "$pathWithoutSuffix.htm" ;
      }
   }

   print "\n" .
         "</ul>\n" .
         "</body>\n" .
         "</html>\n" .
         "" ;
}

sub mathematicaIndexLatex
{
   my ($filter) = @_ ;

   my $urlpath = "https://raw.github.com/peeterjoot/mathematica/master/" ;

   my $prologue1 =
"
%-------------------------------------------------------
These Mathematica notebooks, some just trivial ones used to generate figures, others more elaborate, and perhaps some even polished, can be found in

\\href{$urlpath}{$urlpath}.

The free \\href{http://www.wolfram.com/cdf-player/}{Wolfram CDF player}, is capable of read-only viewing these notebooks to some extent.
" ;

my $prologueCDF = 
"
Files saved explicitly as CDF have interactive content that can be explored with the CDF player.
" ;

my $out = "
\\begin{itemize}
" ;

   my $foundCDF = 0 ;

   foreach ( sort datesort @mathematica )
   {
      my $path = $_->{'path'} ;
      my $date = $_->{'DATE'} ;
      my $desc = $_->{'WHAT'} ;

      if ( $filter )
      {
         next unless ( $path =~ /$filter/ ) ;
      }

      my $fullpath = "https://raw.github.com/peeterjoot/mathematica/master/$path" ;

      my $label = $path ;
      $label =~ s,/,:,g ;

      $foundCDF++ if ( $path =~ /\.cdf$/i ) ;

      $out .= qq(\\item \\phantomsection \\label{path:$label} $date \\href{$fullpath}{$path}

$desc
) ;
   }

   print $prologue1 ;
   if ( $foundCDF )
   {
      print $prologueCDF ;
   }

   print "$out

\\end{itemize}
%-------------------------------------------------------
" ;
}

sub dumpem
{
   my @sorted = sort datesort @_ ;

   print "\\chapter{Chronological Index}\n\\label{chap:Chronology}\n\n\\begin{itemize}\n\n" ;
   foreach (@sorted)
   {
      my ($source, $title, $date, $ref, $what)
         = ( $_->{'SOURCE'},
             $_->{'TITLE'},
             $_->{'DATE'},
             $_->{'REF'},
             $_->{'WHAT'} ) ;

      $what = '' if ( !defined $what and $what ne '' ) ;

      print "\\item $date \\ref{chap:$ref} $title\n\n$what" ;
   }
   print "\\end{itemize}\n" ;
}

#sub testm
#{
#print $monthsOfYear{'July'} ;
#}

sub checkDate
{
   foreach (@miscphysics)
   {
      my $bdate = $_->{'DATE'} ;
      die "date parse: $bdate : $$a\n" unless ( $bdate =~ /(\S+)\s+(\d+)\s*,\s*(\d+)\s*/ ) ;
   }
}

sub datesort
{
   my ($adate, $bdate) = ( $$a{'DATE'}, $$b{'DATE'} ) ;

#   my ($asource, $atitle, $adate, $aref)
#         = ( $$a{'SOURCE'},
#             $$a{'TITLE'},
#             $$a{'DATE'},
#             $$a{'REF'} ) ;
#
#   my ($bsource, $btitle, $bdate, $bref)
#         = ( $$b{'SOURCE'},
#             $$b{'TITLE'},
#             $$b{'DATE'},
#             $$b{'REF'} ) ;

   die "date parse: $adate : $$a\n" unless ( $adate =~ /(\S+)\s+(\d+)\s*,\s*(\d+)\s*/ ) ;
   my ($amonth, $aday, $ayear) = ($1, $2, $3) ;

   die "date parse: $bdate : $$b\n" unless ( $bdate =~ /(\S+)\s+(\d+)\s*,\s*(\d+)\s*/ ) ;
   my ($bmonth, $bday, $byear) = ($1, $2, $3) ;

   my $rc = $ayear <=> $byear ;
   if ( !$rc )
   {
      $rc = $monthsOfYear{$amonth} <=> $monthsOfYear{$bmonth} ;

      if ( !$rc )
      {
         $rc = $aday <=> $bday ;
      }
   }

   return $rc ;
}

sub printBib
{
   foreach (sort { $a->{SOURCE} cmp $b->{SOURCE} } @_)
   {
      next unless ( exists $_->{'URL'} ) ;

      my $r = $_->{'REF'} ;
      $r = $_->{'BIBREF'} if ( exists $_->{'BIBREF'} ) ;

      print
"\@webpage{$r,
   author={Peeter Joot},
   title={{$_->{'TITLE'}}},
   url={$_->{'URL'}},
}

" ;
   }
}

sub printBookBib
{
   my ($title, $tag, $url, @rest) = @_ ;

   foreach ( sort { $a->{SOURCE} cmp $b->{SOURCE} } @rest )
   {
      my $r = $_->{'REF'} ;
      $r = $_->{'BIBREF'} if ( exists $_->{'BIBREF'} ) ;
      my $chapter = $_->{'TITLE'} ;

      print
"\@inbook{$tag:$r,
   author={Peeter Joot},
   title={{$title}},
   chapter={{$chapter}},
   url={$url},
}

" ;
   }
}

#sub printBib
#{
#   foreach (sort { $a->{SOURCE} cmp $b->{SOURCE} } @_)
#   {
#      my $r = $_->{'REF'} ;
#      my $s = $_->{'SOURCE'} ;
#      $r = $_->{'BIBREF'} if ( exists $_->{'BIBREF'} ) ;
#
#      print "s/chapcite{$s}/chapcite{$s}{$r}/\n" ;
#   }
#}

# for my web page listing.
sub printHistory
{
   my @sorted = reverse sort datesort @_ ;

   foreach (@sorted)
   {
      next unless ( exists $_->{'URL'} ) ;

      my ($date, $url, $title, $what) = ($_->{'DATE'}, $_->{'URL'}, $_->{'TITLE'}, $_->{WHAT} ) ;

      if ( defined $what )
      {
         if ( $what eq $title )
         {
            $what = '' ;
         }
      }
      else
      {
         $what = '' ;
      }

      print qq($date <a href="$url">$title</a><br>$what<br>\n\n) ;
   }
}





