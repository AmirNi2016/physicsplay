Your assignment:

1. Parallelize the time-evolution part of this code with OpenMP.
   done.

2. Selecting the file I/O option in waveparams.txt (graphics=0), verify the correctness of your code by comparing the serial output and parallel output (i.e. dataFilename.out in both cases).

   ./part1.sh

3. Reduce the output frequency (set outtime in waveparams.txt to something large), switch off graphics, and perform a scaling analysis of the parallelized code, with the number of threads ranging from 1 to 8.

   batch submitted.  Summarize results in the morn for the report.

4. Next, parallelize the output routines in two ways:
   1. Write to a different file from each thread.
   2. Have all threads write to the same file, using critical and other openmp compiler directives to ensure the file is written out correctly.

5. Set outime to 0.1, and perform a scaling analysis upto 8 cores for the two parallel output strategies.

Submit the three versions of the code (with parallel time evolution, with different-file output, and with single-file output), scaling plots, and a short report with your conclusion on what works, what does not work (well), and why. Use the "assignment dropbox" on the top of the course's web site.
