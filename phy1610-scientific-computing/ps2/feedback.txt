Ramses van Zon - 2016-02-08 23:14
The interface to your classes is somewhat unobvious. Your iterator construction makes it hard to see that what "int main()" is performing number of time steps. It is not obvious that the initialize member function of the ants_on_table class returns an object that upon increment, moves the original object forward one time step. Nor is it obvious the dereference operator for this iterator returns the total number of ants; be careful in overloading operators if the operators do not closely mean what they would have meant for built-in types or do not following establish conventions (as the STL). These surprises can make your code hard to maintain, if not for you (in one year), certainly for the next grad student in the group that inherits your code. 

This is not a criticism of using classes; the way you could have m_new_number_of_ants allocated only once is a big plus, and being able to do so without having to have it be a global variable or be passed as a helper array to every function is a great way to hide the implementation from the functional interface. 

A side effect of all this automagic is that you've not created modules for the output, initialization and timestep separately, which was asked in the assignment.
