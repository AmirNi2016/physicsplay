#!/usr/bin/perl

use strict ;
use warnings ;
use Getopt::Long ;
my $deltext ;
my $dollar ;
my $help ;

GetOptions
( 
   'delimiter=s'      => \$deltext,
   'dollar!'         => \$dollar,
   'help!'           => \$help,
) ;

if ( defined $help )
{
   print "del2xml [-help] [-delimiter blah] [-dollar]\n" .
         "\n" .
         "Options:\n" .
         "\t-dollar\tUse '\$' as a delimiter.\n" .
         "\t-delimiter blah\tUse 'blah' as a delimiter.\n" .
         "\n" .
         "Default delimiter is '[opt-spaces],[opt-spaces]\n" .
         "" ;

   exit 1 ;
}

my $delimiter ;
if ( defined $dollar )
{
   $delimiter = qr(\$) ;
}
elsif ( defined $deltext )
{
   $delimiter = qr($deltext) ;
}
else
{
   $delimiter = qr(\s*,\s*) ; # opt-spaces comma opt-spaces
}

my @headers ;
my @rows ;
my @sizes ;
my $numTags ;
print q(<?xml version="1.0" encoding="utf-8"?>
<DataSet xmlns="http://www.ibm.com/qmf" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <ResultSet>
    <MetaData>
      <SourceDescription/>
) ;

my $rowIter = 0 ;
while ( <> )
{
   chomp ; # take off the trailing newline character.

   my @e = split( $delimiter, $_ ) ;
   my $numColumns = scalar( @e ) ; 

   if ( defined $numTags )
   {
      die "numColumns != numTags: $numColumns, $numTags\n" if ( $numColumns != $numTags ) ;

      $rows[$rowIter] = \@e ;

      my $i = 0 ;
      foreach (@e)
      {
         if ( $sizes[$i] < length( $_ ) )
         {
            $sizes[$i] = length( $_ )
         }

         $i++ ;
      }

      $rowIter++ ;
   }
   else
   {
      @headers = @e ;
      my $i = 0 ;

      foreach (@e)
      {
         $sizes[$i] = 0 ; #length( $_ ) ;
      }

      $numTags = $numColumns ;
   }
}

print "      <ColumnsAmount>$numTags</ColumnsAmount>\n" ;

for ( my $c = 0 ; $c < $numTags ; $c++ )
{
   my $cpp = $c + 1 ;
   my $n = $headers[ $c ] ;
   my $s = $sizes[ $c ] ;

   print qq(
      <ColumnDescription id="$cpp">
        <Name>$n</Name>
        <Label>$n</Label>
        <Type>char</Type>
        <Width>$s</Width>
        <Nullable>false</Nullable>
        <Format>plain</Format>
      </ColumnDescription>
) ;
}

print q(
    </MetaData>
    <Data>
) ;

for ( my $r = 0 ; $r < $rowIter ; $r++ )
{
   printOneRow( $r, $rows[$r] ) ;
}

print q(
     </Data>
  </ResultSet>

  <Extensions/>

</DataSet>
) ;

exit 0 ;

sub printOneRow
{
   my ($r, $cr) = @_ ;
   my @c = @$cr ;

print qq(      <Row id="$r">\n) ;

   for ( my $i = 0 ; $i < $numTags ; $i++ )
   {
      my $cpp = $i + 1 ;
      my $sz = $sizes[$i] ;
      my $cv = $c[$i] ;
      my $v = sprintf( "%-${sz}s", $cv ) ;

      print qq(        <Cell id="$cpp">$v</Cell>\n) ;
   }

print qq(      </Row>\n) ;
}
